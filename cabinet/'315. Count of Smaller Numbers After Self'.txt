/**
 * # 315. Count of Smaller Numbers After Self
 * ##### Topics: Array, Binary Search, Divide and Conquer, Binary Indexed Tree, Segment Tree, Merge Sort, Ordered Set
 * ##### Level: Hard
 * ##### Status: Time Limit Exceeded
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 주어진 수열(nums)에서, 임의의 두 위치 i, j가 아래 조건을 만족하면,
 * 배열 각각에 조건을 만족하는 수를 구해 반환하는 문제이다.
 *
 * * 0 <= i < j <= nums.size
 * * nums[[i]] > nums[[j]]
 *
 * 1. 주어진 수열(nums)을 `Pair<Int, Int>`(count, index)를 가진 배열로 변환하고 병합 정렬 알고리즘을 적용한다.
 * 2. 병합 단계에서 왼쪽 배열을 순회한다.
 * 3. 왼쪽 배열의 특정 요소 기준으로 오른쪽 배열을 순회하면서 조건들을 만족하는지 확인한다.
 * 4. 조건에 부합하면, 현재 위치를 조정한다.
 * 5. 조정한만큼 count를 추가 증가시킨다.
 * 6. 정렬한다.
 */
class Solution {
    fun countSmaller(nums: IntArray): List<Int> {
        val result = Array<Pair<Int, Int>>(size = nums.size) { 0 to it }

        mergeSort(
            arr = nums,
            temp = Array<Pair<Int, Int>>(size = nums.size) { 0 to it },
            result = result,
            start = 0,
            end = nums.lastIndex
        )

        return result.sortedBy { it.second }.map { it.first }
    }

    fun mergeSort(
        arr: IntArray,
        temp: Array<Pair<Int, Int>>,
        result: Array<Pair<Int, Int>>,
        start: Int,
        end: Int
    ) {
        if (start >= end) {
            return
        }

        val mid = (start + end) / 2

        mergeSort(arr, temp, result, start, mid)
        mergeSort(arr, temp, result, mid + 1, end)
        merge(arr, temp, result, start, mid, end)
    }

    fun merge(
        arr: IntArray,
        temp: Array<Pair<Int, Int>>,
        result: Array<Pair<Int, Int>>,
        start: Int,
        mid: Int,
        end: Int
    ) {
        var current = mid + 1

        for (i in start..mid) {
            while (current <= end &&
                arr[result[i].second] > arr[result[current].second]
            ) {
                current++
            }

            result[i] = result[i].first + current - (mid + 1) to result[i].second
        }

        var i = start
        var l = start
        var r = mid + 1

        while (l <= mid && r <= end) {
            temp[i++] = if (arr[result[l].second] <= arr[result[r].second]) {
                result[l++]
            } else {
                result[r++]
            }
        }

        while (l <= mid) {
            temp[i++] = result[l++]
        }

        while (r <= end) {
            temp[i++] = result[r++]
        }

        for (i in start..end) {
            result[i] = temp[i]
        }
    }
}

fun main() {
    println(
        Solution().countSmaller(nums = intArrayOf(5, 2, 6, 1))
            .joinToString(
                separator = ", ",
                prefix = "[",
                postfix = "]"
            )
    )
    println(
        Solution().countSmaller(nums = intArrayOf(-1))
            .joinToString(
                separator = ", ",
                prefix = "[",
                postfix = "]"
            )
    )
    println(
        Solution().countSmaller(nums = intArrayOf(-1, -1))
            .joinToString(
                separator = ", ",
                prefix = "[",
                postfix = "]"
            )
    )
}
