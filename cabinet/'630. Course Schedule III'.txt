import java.util.*

/**
 * # 630. Course Schedule III
 * ##### Topics: Array, Greedy, Sorting, Heap (Priority Queue)
 * ##### Level: Hard
 * ##### Status: Wrong Answer
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 강의 기간과 종강일이 배열로 주어질 때, 최대한 많이 수강할 수 있는 강의 수를 구하는 문제이다.
 *
 * 현재까지 수집한 강의들 중에서 강의 기간이 긴 강의를 제외하고 짧은 강의들을 추가하는 것이 이 문제의 핵심이다.
 *
 * 1. 배열(courses)을 종강일 기준으로 정렬하여 순회한다.
 * 2. 만약 현재 강의를 추가하려 할 때 종강일을 넘어선다면,
 * 수집한 강의(heap) 중에 현재 강의 기간보다 더 강의를 하나 제외한다.
 * 3. 제외 후, 더 짧은 강의 기간을 수집한다.
 * 4. 현재까지 수집한 강의 수를 반환한다.
 */
class Solution {
    fun scheduleCourse(courses: Array<IntArray>): Int {
        val heap = PriorityQueue<IntArray>(compareByDescending<IntArray> { it[0] })
        var firstDay = 0

        courses.sortedWith(compareBy<IntArray> { it[1] })
            .forEach { course ->
                if (heap.isNotEmpty() &&
                    firstDay + course[0] > course[1] &&
                    heap.peek()[0] > course[0]
                ) {
                    firstDay -= heap.poll()[0]
                }

                if (firstDay + course[0] <= course[1]) {
                    firstDay += course[0]

                    heap.add(course)
                }
            }

        return heap.size
    }
}

fun main() {
    println(
        Solution().scheduleCourse(
            courses = arrayOf(
                intArrayOf(100, 200),
                intArrayOf(200, 1300),
                intArrayOf(1000, 1250),
                intArrayOf(2000, 3200),
            )
        )
    )
    println(
        Solution().scheduleCourse(
            courses = arrayOf(intArrayOf(1, 2))
        )
    )
    println(
        Solution().scheduleCourse(
            courses = arrayOf(
                intArrayOf(3, 2),
                intArrayOf(4, 3)
            )
        )
    )
    println(
        Solution().scheduleCourse(
            courses = arrayOf(
                intArrayOf(5, 5),
                intArrayOf(4, 6),
                intArrayOf(2, 6)
            )
        )
    )
    println(
        Solution().scheduleCourse(
            courses = arrayOf(
                intArrayOf(5, 15),
                intArrayOf(3, 19),
                intArrayOf(6, 7),
                intArrayOf(2, 10),
                intArrayOf(5, 16),
                intArrayOf(8, 14),
                intArrayOf(10, 11),
                intArrayOf(2, 19)
            )
        )
    )
    println(
        Solution().scheduleCourse(
            courses = arrayOf(
                intArrayOf(7,16),
                intArrayOf(2,3),
                intArrayOf(3,12),
                intArrayOf(3,14),
                intArrayOf(10,19),
                intArrayOf(10,16),
                intArrayOf(6,8),
                intArrayOf(6,11),
                intArrayOf(3,13),
                intArrayOf(6,16)
            )
        )
    )
    println(
        Solution().scheduleCourse(
            courses = arrayOf(
                intArrayOf(7,17),
                intArrayOf(3,12),
                intArrayOf(10, 20),
                intArrayOf(9,10),
                intArrayOf(5,20),
                intArrayOf(10,19),
                intArrayOf(4,18)
            )
        )
    )
}
