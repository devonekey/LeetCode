import java.util.*

/**
 * # 347. Top K Frequent Elements
 * ##### Topics: Array, Hash Table, Divide And Conquer, Heap (Priority Queue), Bucket Sort, Counting, Quickselect
 * ##### Level: Medium
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 수열이 주어지고 출현 빈도에 따라 나열할 때, k 번째까지의 수들을 구하는 문제이다.
 */
class Solution {
    fun topKFrequent(nums: IntArray, k: Int): IntArray {
        val map = HashMap<Int, Int>()

        nums.forEach { num -> map.put(num, map.getOrDefault(num, 0) + 1) }

        return map.toList()
            .sortedWith(object : Comparator<Pair<Int, Int>> {
                override fun compare(o1: Pair<Int, Int>, o2: Pair<Int, Int>): Int {
                    return o2.second.compareTo(o1.second)
                }
            })
            .map { it.first }
            .subList(0, k)
            .toIntArray()
    }
}

fun main() {
    println(
        Solution()
            .topKFrequent(nums = intArrayOf(1, 1, 1, 2, 2, 3), k = 2)
            .joinToString(separator = ", ", prefix = "[", postfix = "]")
    )
}
