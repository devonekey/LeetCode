import java.util.*

/**
 * # 493. Reverse Pairs
 * ##### Topics: Array, Binary Search, Divide and Conquer, Binary Indexed Tree, Segment Tree, Merge Sort, Ordered Set
 * ##### Level: Hard
 * ##### Status: Time Limit Exceeded
 * ##### Language: Kotlin
 */
class Solution {
    fun reversePairs(nums: IntArray): Int {
        val deque = ArrayDeque<Int>(
            nums.indices
                .sortedWith(comparator = object : Comparator<Int> {
                    override fun compare(o1: Int, o2: Int): Int =
                        nums[o1].compareTo(nums[o2])
                            .takeIf { it != 0 }
                            ?: o2.compareTo(o1)
                })
        )
        val cache = mutableListOf<Int>()
        var count = 0

        while (deque.isNotEmpty()) {
            val j = deque.removeFirst()

            while (deque.isNotEmpty() && nums[deque.last()] > 2.toLong() * nums[j]) {
                if (deque.last() < j) {
                    count++
                }

                cache.add(deque.removeLast())
            }

            deque.addAll(cache.reversed())
            cache.clear()
        }

        return count
    }
}

fun main() {
    println(Solution().reversePairs(nums = intArrayOf(1, 3, 2, 3, 1)))
    println(Solution().reversePairs(nums = intArrayOf(2, 4, 3, 5, 1)))
    println(
        Solution().reversePairs(
            nums = intArrayOf(
                2147483647,
                2147483647,
                2147483647,
                2147483647,
                2147483647,
                2147483647
            )
        )
    )
    println(Solution().reversePairs(nums = intArrayOf(5, 4, 3, 2, 1)))
    println(Solution().reversePairs(nums = intArrayOf(-5, -5)))
}
