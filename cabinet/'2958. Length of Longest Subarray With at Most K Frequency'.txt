import kotlin.math.*

/**
 * # 2958. Length of Longest Subarray With at Most K Frequency
 * ##### Topics: Array, Hash Table, Sliding Window
 * ##### Level: Medium
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 수열(nums)과 허용 가능한 빈도 값(k)이 주어질 때,
 * 각 수의 출현 빈도가 k를 넘지 않은 선에서 가질 수 있는 부분 수열의 최대 길이를 구하는 문제이다.
 *
 * 1. 수열을 순회하면서 Map에 출현 빈도를 증가시킨다.
 * 2. 빈도가 k 값을 넘을 때, 현재 위치(index) 미만 부분 배열의 시작(start)까지의 길이를 구한다.
 * 3. 현재 값이 부분 배열에 들어갈 수 있도록 부분 배열의 시작과 빈도를 조정한다.
 * 4. 수열 순회 이후, 부분 배열의 길이를 구한다.
 */
class Solution {
    fun maxSubarrayLength(nums: IntArray, k: Int): Int {
        val frequencyMap = hashMapOf<Int, Int>()
        var start = 0
        var length = 0

        nums.forEachIndexed { index, num ->
            val frequency = frequencyMap.getOrDefault(num, 0)

            if (frequency < k) {
                frequencyMap[num] = frequency + 1

                return@forEachIndexed
            }

            length = max(length, index - start)

            while (num != nums[start]) {
                frequencyMap[nums[start]] = frequencyMap.getValue(nums[start]) - 1
                start++
            }

            start++
        }

        length = max(length, nums.size - start)

        return length
    }
}

fun main() {
    println(Solution().maxSubarrayLength(nums = intArrayOf(1, 2, 3, 1, 2, 3, 1, 2), k = 2))
    println(Solution().maxSubarrayLength(nums = intArrayOf(1, 2, 1, 2, 1, 2, 1, 2), k = 1))
    println(Solution().maxSubarrayLength(nums = intArrayOf(5, 5, 5, 5, 5, 5, 5), k = 4))
}
