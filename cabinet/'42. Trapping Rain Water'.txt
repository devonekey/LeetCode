import utils.*

/**
 * # 42. Trapping Rain Water
 * ##### Topics: Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack</h5>
 * ##### Level: Hard
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 높이를 나타내는 숫자 배열이 주어지고 비가 와서 물이 고인다고 가장할 때,
 * 고여있는 물의 양을 반환하는 문제이다.
 *
 * 1. 각 높이를 순회하면서 가장 높은 수의 위치를 기억한다.
 * 2. 만약 현재 위치의 높이가 가장 높은 수보다 크거나 같다면, 현재 위치의 높이부터 가장 높은 수의 위치까지 순회하면서
 * 가장 높은 수의 차를 구하여 고여있는 물의 양을 계산한다.
 * 3. 만약 현재 위치의 높이가 가장 높은 수보다 작다면, 현재 위치의 높이부터 가장 높은 수의 위치까지
 * 자세히는 현재 위치의 높이보다 큰 수를 만날 때까지 순회하면서
 * 현재 위치의 높이 차를 구하여 고여있는 물의 양을 계산한다.
 * 4. 이 경우에는 물이 채워졌으므로 물의 높이로 높이를 조정한다.
 * 5. 위 과정을 모든 높이를 순회할 때까지 반복한다.
 */
class Solution {
    fun trap(height: IntArray): Int {
        var trapped = 0
        var highestIndex = -1

        height.forEachIndexed { index, h ->
            when {
                highestIndex == -1 -> highestIndex = index
                h >= height[highestIndex] -> {
                    (index - 1 downTo highestIndex + 1).forEach {
                        trapped += height[highestIndex] - height[it]
                    }

                    highestIndex = index
                }
                else -> {
                    (index - 1 downTo highestIndex + 1).forEach {
                        if (h <= height[it]) {
                            return@forEachIndexed
                        }

                        trapped += h - height[it]
                        height[it] = h
                    }
                }
            }
        }

        return trapped
    }
}

fun main() {
    Solution().trap(height = intArrayOf(0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1))
        .runTestcase(expected = 6)
    Solution().trap(height = intArrayOf(4, 2, 0, 3, 2, 5))
        .runTestcase(expected = 9)
}
