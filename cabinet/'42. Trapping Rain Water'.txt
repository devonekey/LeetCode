import utils.*
import java.util.*
import kotlin.math.*

/**
 * # 42. Trapping Rain Water
 * ##### Topics: Array, Two Pointers, Dynamic Programming, Stack, Monotonic Stack</h5>
 * ##### Level: Hard
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 높이를 나타내는 숫자 배열이 주어지고 비가 와서 물이 고인다고 가장할 때,
 * 고여있는 물의 양을 반환하는 문제이다.
 *
 * 1. 각 높이(height)를 순회한다.
 * 2. 단조 스택(stack)을 순회한다.
 * 3. 만약 stack이 가리키는 위치의 높이가 현재 높이보다 낮다면, stack에서 꺼낸다.
 * stack에서 꺼낸 위치는 물을 넣을 바닥이 된다.
 * 4. 현재 높이와 stack이 새롭게 가리키는 위치의 높이 중에 낮은 높이로 바닥까지 높이 차를 구하고,
 * 현재 위치와 stack이 가리키는 위치 차를 곱해 고여있는 물의 양을 계산한다.
 * 5. stack에 현재 위치를 넣는다.
 */
class Solution {
    fun trap(height: IntArray): Int {
        var trapped = 0
        val stack = Stack<Int>()

        height.forEachIndexed { index, h ->
            while (stack.isNotEmpty() && height[stack.peek()] < h) {
                val lowestIndex = stack.pop()

                if (stack.isEmpty()) {
                    break
                }

                val peekedIndex = stack.peek()

                trapped += (index - peekedIndex - 1) * (min(height[peekedIndex], h) - height[lowestIndex])
            }

            stack.add(index)
        }

        return trapped
    }
}

fun main() {
    Solution().trap(height = intArrayOf(0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1))
        .runTestcase(expected = 6)
    Solution().trap(height = intArrayOf(4, 2, 0, 3, 2, 5))
        .runTestcase(expected = 9)
}
