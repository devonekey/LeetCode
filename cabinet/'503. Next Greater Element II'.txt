import utils.*
import java.util.*

/**
 * # 503. Next Greater Element II
 * ##### Topics: Array, Stack, Monotonic Stack
 * ##### Level: Medium
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 순환 가능한 숫자 배열이 주어지고 배열을 순회하면서,
 * 특정 위치의 수보다 큰 수를 발견하면 새 배열에 기록하여 반환하는 문제이다.
 *
 * 만약 큰 수를 발견하지 못하는 경우에는 -1을 기록한다.
 *
 * 1. 결과를 반환할 배열(resuljt)을 -1로 초기화하여 생성한다.
 * 2. 주어진 배열(nums)에 같은 배열을 추가하여 긴 배열을 만들어 순회한다.
 * 3. 단조 스택(stack)을 순회한다.
 * 4. 현재 값이 stack이 가리키는 값보다 현재 값(num)이 더 크면, stack에서 값을 꺼내 result에 num을 넣는다.
 * 5. stack에 현재 위치를 넣는다.
 *
 * 해당 풀이는 O(N)의 성능을 보장한다.
 */
class Solution {
    fun nextGreaterElements(nums: IntArray): IntArray {
        val stack = Stack<Int>()
        val result = IntArray(nums.size) { -1 }

        (nums + nums).forEachIndexed { index, num ->
            while (stack.isNotEmpty() && nums[stack.peek()] < num) {
                result[stack.pop()] = num
            }

            if (index < nums.size) {
                stack.push(index)
            }
        }

        return result
    }
}

fun main() {
    Solution().nextGreaterElements(nums = intArrayOf(1, 2, 1))
        .runTestcase(expected = intArrayOf(2, -1, 2))
    Solution().nextGreaterElements(nums = intArrayOf(1, 2, 3, 4, 3))
        .runTestcase(expected = intArrayOf(2, 3, 4, -1, 4))
    Solution().nextGreaterElements(nums = intArrayOf(5, 4, 3, 2, 1))
        .runTestcase(expected = intArrayOf(-1, 5, 5, 5, 5))
    Solution().nextGreaterElements(nums = intArrayOf(1, 2, 3, 2, 1))
        .runTestcase(expected = intArrayOf(2, 3, -1, 3, 2))
    Solution().nextGreaterElements(nums = intArrayOf(1, 5, 3, 6, 8))
        .runTestcase(expected = intArrayOf(5, 6, 6, 8, -1))
}
