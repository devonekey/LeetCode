public class Solution {
    private int[][] grid;

    public static void main(String[] args) {
        /*System.out.println(new Solution().maxAreaOfIsland(new int[][]{
                        {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                        {0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0},
                        {0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0}
                })
        );*/
        System.out.println(new Solution().maxAreaOfIsland(new int[][]{
                        {1, 1, 0, 0, 0},
                        {1, 1, 0, 0, 0},
                        {0, 0, 0, 1, 1},
                        {0, 0, 0, 1, 1}
                })
        );
    }

    public int maxAreaOfIsland(int[][] grid) {
        int max = 0;
        this.grid = grid;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[i].length; j++) {
                if (grid[i][j] == 1) {
                    max = Math.max(findArea(i, j), max);
                }
            }
        }

        return max;
    }

    int findArea(int r, int c) {
        int count = 1;

        grid[r][c] = 0;

        if (c > 0 && grid[r][c - 1] == 1) {
            count += findArea(r, c - 1);
        }

        if (r > 0 && grid[r - 1][c] == 1) {
            count += findArea(r - 1, c);
        }

        if (c < grid[r].length - 1 && grid[r][c + 1] == 1) {
            count += findArea(r, c + 1);
        }

        if (r < grid.length - 1 && grid[r + 1][c] == 1) {
            count += findArea(r + 1, c);
        }

        return count;
    }
}
