import java.util.ArrayList;
import java.util.List;

public class Solution {
    public static void main(String[] args) {
        TreeNode treeNode1 = new Solution().new TreeNode(1);
        TreeNode treeNode2 = new Solution().new TreeNode(2);
        TreeNode treeNode3 = new Solution().new TreeNode(3);
        treeNode1.right = treeNode2;
        treeNode2.left = treeNode3;

        new Solution().inorderTraversal(treeNode1);
    }

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        List<CustomTreeNode> stack = new ArrayList<>();

        if (root != null) {
            stack.add(new CustomTreeNode(root));
        }

        while (stack.size() > 0) {
            CustomTreeNode target = stack.get(stack.size() - 1);

            while (target.left != null && !target.left.visit) {
                stack.add(target.left);

                target = target.left;
            }

            target.visit = true;

            list.add(target.val);
            stack.remove(target);

            if (target.right != null && !target.right.visit) {
                stack.add(target.right);
            }
        }

        return list;
    }

    public class CustomTreeNode extends TreeNode {
        boolean visit;
        CustomTreeNode left;
        CustomTreeNode right;

        CustomTreeNode(TreeNode origin) {
            super(origin.val);

            if (origin.left != null) {
                left = new CustomTreeNode(origin.left);
            }

            if (origin.right != null) {
                right = new CustomTreeNode(origin.right);
            }
        }
    }

    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) {
            val = x;
        }
    }
}
