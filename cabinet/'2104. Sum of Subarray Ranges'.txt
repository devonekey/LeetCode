import utils.*
import kotlin.math.*

/**
 * # 2104. Sum of Subarray Ranges
 * ##### Topics: Array, Stack, Monotonic Stack
 * ##### Level: Medium
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 주어진 숫자 배열에서 부분 배열들을 구해 최댓값과 최솟값의 차들의 합을 계산하는 문제이다.
 *
 * 1. 숫자 배열을 이중으로 순회하면서 각 숫자를 만날 때마다 최댓값, 최솟값을 구하여 합산한다.
 *
 * O(N^2)의 성능으로 최적의 성능은 아니다.
 */
class Solution {
    fun subArrayRanges(nums: IntArray): Long {
        var sum = 0L

        (0 until nums.lastIndex).forEach { i ->
            var maxNum = nums[i].toLong()
            var minNum = nums[i].toLong()

            ((i + 1)..nums.lastIndex).forEach { j ->
                maxNum = max(maxNum, nums[j].toLong())
                minNum = min(minNum, nums[j].toLong())
                sum += maxNum - minNum
            }
        }

        return sum
    }
}

fun main() {
    Solution().subArrayRanges(nums = intArrayOf(1, 2, 3))
        .runTestcase(expected = 4)
    Solution().subArrayRanges(nums = intArrayOf(1, 3, 3))
        .runTestcase(expected = 4)
    Solution().subArrayRanges(nums = intArrayOf(4, -2, -3, 4, 1))
        .runTestcase(expected = 59)
}
