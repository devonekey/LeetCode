import utils.*
import java.util.*

/**
 * # 2104. Sum of Subarray Ranges
 * ##### Topics: Array, Stack, Monotonic Stack
 * ##### Level: Medium
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 주어진 숫자 배열에서 부분 배열들을 구해 최댓값과 최솟값의 차들의 합을 계산하는 문제이다.
 *
 * 1. 수열을 순회한다.
 * 2. 현재 수가 stack이 가리키는 위치의 수보다 크거나 같으면,
 * stack이 가리키는 위치의 수가 이후의 현재 이후의 수들로부터 최댓값이 아니게 되므로,
 * stack에서 위치를 꺼내 부분 수열의 갯수를 계산한다.
 * 3. 순회 이후, stack을 비우면서 부분 수열의 갯수를 계산한다.
 * 4. 수열을 다시 순회한다.
 * 5. 현재 수가 stack이 가리키는 위치의 수보다 작거나 같으면,
 * stack이 가리키는 위치의 수가 이후의 현재 이후의 수들로부터 최솟값이 아니게 되므로,
 * stack에서 위치를 꺼내 부분 수열의 갯수를 계산한다.
 * 6. 순회 이후, stack을 비우면서 부분 수열의 갯수를 계산한다.
 * 7. 각 위치의 부분 수열 갯수와 각 위치의 최댓값을 곱하고 모두 더한 값과
 * 각 위치의 부분 수열 갯수와 각 위치의 최솟값을 곱하고 모두 더한 값의 차를 구하고 반환한다.
 *
 * 해당 풀이는 O(N)의 성능을 지닌다.
 */
class Solution {
    fun subArrayRanges(nums: IntArray): Long {
        val stack = Stack<Int>()
        val greater = IntArray(nums.size) { 0 }
        val less = IntArray(nums.size) { 0 }

        nums.forEachIndexed { index, num ->
            while (stack.isNotEmpty() && nums[stack.peek()] <= num) {
                val popped = stack.pop()
                greater[popped] = (index - popped) * if (stack.isNotEmpty()) {
                    popped - stack.peek()
                } else {
                    popped + 1
                }
            }

            stack.add(index)
        }

        while (stack.isNotEmpty()) {
            val popped = stack.pop()
            greater[popped] = (nums.size - popped) * if (stack.isNotEmpty()) {
                popped - stack.peek()
            } else {
                popped + 1
            }
        }

        nums.forEachIndexed { index, num ->
            while (stack.isNotEmpty() && nums[stack.peek()] >= num) {
                val popped = stack.pop()
                less[popped] = (index - popped) * if (stack.isNotEmpty()) {
                    popped - stack.peek()
                } else {
                    popped + 1
                }
            }

            stack.add(index)
        }

        while (stack.isNotEmpty()) {
            val popped = stack.pop()
            less[popped] = (nums.size - popped) * if (stack.isNotEmpty()) {
                popped - stack.peek()
            } else {
                popped + 1
            }
        }

        return greater.mapIndexed { index, frequency -> nums[index].toLong() * frequency }.sum() -
                less.mapIndexed { index, frequency -> nums[index].toLong() * frequency }.sum()
    }
}

fun main() {
    Solution().subArrayRanges(nums = intArrayOf(1, 2, 3))
        .runTestcase(expected = 4)
    Solution().subArrayRanges(nums = intArrayOf(1, 3, 3))
        .runTestcase(expected = 4)
    Solution().subArrayRanges(nums = intArrayOf(4, -2, -3, 4, 1))
        .runTestcase(expected = 59)
}
