import kotlin.math.*

/**
 * # 2406. Divide Intervals Into Minimum Number of Groups
 * ##### Topics: Array, Two Pointers, Greedy, Sorting, Heap (Priority Queue), Prefix Sum
 * ##### Level: Medium
 * ##### Status: Time Limit Exceeded
 * ##### Language: Kotlin
 */
class Solution {
    fun minGroups(intervals: Array<IntArray>): Int {
        var n = intervals[0][1]
        val sorted = intervals.sortedWith(compareBy {
            n = max(n, it[1])

            it[1]
        }).toMutableList()
        val group = IntArray(n + 1)

        while (sorted.isNotEmpty()) {
            val start = sorted.first()[0]
            val end = sorted.first()[1]
            val target = group.filterIndexed { index, _ -> index in 0..start - 1 }
                .indexOfLast { count -> count > 0 }

            if (target > 0) {
                group[target]--
            }

            sorted.removeAt(0)
            group[end]++
        }

        return group.sum()
    }
}

fun main() {
    println(
        Solution().minGroups(
            intervals = arrayOf<IntArray>(
                intArrayOf(5, 10),
                intArrayOf(6, 8),
                intArrayOf(1, 5),
                intArrayOf(2, 3),
                intArrayOf(1, 10)
            )
        )
    )
    println(
        Solution().minGroups(
            intervals = arrayOf<IntArray>(
                intArrayOf(1, 3),
                intArrayOf(5, 6),
                intArrayOf(8, 10),
                intArrayOf(11, 13)
            )
        )
    )
    println(
        Solution().minGroups(
            intervals = arrayOf<IntArray>(
                intArrayOf(441459,446342),
                intArrayOf(801308,840640),
                intArrayOf(871890,963447),
                intArrayOf(228525,336985),
                intArrayOf(807945,946787),
                intArrayOf(479815,507766),
                intArrayOf(693292,944029),
                intArrayOf(751962,821744)
            )
        )
    )
}
