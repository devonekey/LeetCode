import java.util.PriorityQueue

/**
 * # 2406. Divide Intervals Into Minimum Number of Groups
 * ##### Topics: Array, Two Pointers, Greedy, Sorting, Heap (Priority Queue), Prefix Sum
 * ##### Level: Medium
 * ##### Status: Time Limit Exceeded
 * ##### Language: Kotlin
 */
class Solution {
    fun minGroups(intervals: Array<IntArray>): Int {
        val sorted = intervals.sortedWith(compareBy { it[1] }).toMutableList()
        val heap = PriorityQueue<Int>(compareByDescending<Int> { it })
        val cache = mutableListOf<Int>()

        while (sorted.isNotEmpty()) {
            if (heap.isNotEmpty() && sorted.first()[0] > heap.peek()) {
                heap.poll()
            } else if (heap.isNotEmpty()) {
                cache.add(heap.poll())

                continue
            }

            heap.add(sorted.removeAt(0)[1])
            heap.addAll(cache)
            cache.clear()
        }

        return heap.size
    }
}

fun main() {
    println(
        Solution().minGroups(
            intervals = arrayOf<IntArray>(
                intArrayOf(5, 10),
                intArrayOf(6, 8),
                intArrayOf(1, 5),
                intArrayOf(2, 3),
                intArrayOf(1, 10)
            )
        )
    )
    println(
        Solution().minGroups(
            intervals = arrayOf<IntArray>(
                intArrayOf(1, 3),
                intArrayOf(5, 6),
                intArrayOf(8, 10),
                intArrayOf(11, 13)
            )
        )
    )
}
