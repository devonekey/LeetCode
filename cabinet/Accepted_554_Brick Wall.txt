import java.util.*;

public class Solution {
// 6
// 1 2 2 1
// 3 1 2
// 1 3 2
// 2 4
// 3 1 2
// 1 3 1 1

// 3
// 6 2 2
// 1 4 4 1
// 2 5 3

// 3
// 1
// 1
// 1
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = Integer.parseInt(scanner.nextLine());
        List<List<Integer>> wall = new ArrayList<>();

        for (int i = 0; i < N; i++) {
            List<Integer> row = new ArrayList<>();
            String[] tokens = scanner.nextLine().split(" ");

            for (String token : tokens) {
                row.add(Integer.parseInt(token));
            }

            wall.add(row);
        }

        System.out.println("result : " + new Solution().leastBricks(wall));
    }

    public int leastBricks(List<List<Integer>> wall) {
        Map<Integer, Integer> map = new HashMap<>();

        for (List<Integer> row : wall) {
            int currentLength = 0;

            for (Integer brick : row) {
                currentLength += brick;

                map.put(currentLength, map.getOrDefault(currentLength, 0) + 1);
            }

            map.put(currentLength, map.getOrDefault(currentLength, 0) - 1);
        }

        int result = Integer.MAX_VALUE;

        for (int length : map.keySet()) {
            result = Math.min(result, wall.size() - map.get(length));
        }

        return result < wall.size() ? result : wall.size();
    }
}
