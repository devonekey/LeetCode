import utils.*
import java.util.*
import kotlin.math.*

/**
 * # 853. Car Fleet
 * ##### Topics: Array, Stack, Sorting, Monotonic Stack
 * ##### Level: Medium
 * ##### Status: Accepted
 * ##### Language: Kotlin
 * ##### Explanation
 *
 * 목표 위치와 각 차의 시작 위치 배열, 각 차의 속도 배열이 주어지고 각 차들이 목표 위치로 나아갈 때,
 * 차들이 몇개의 대형으로 통과하는지를 계산하는 문제이다.
 *
 * 각 차들은 저마다의 시작 위치와 속도를 가지고 있어 만날 수 있는데,
 * 이 때 대형이 합쳐지게 되며 합쳐진 위치부터 느린 차의 속도로 진행하게 된다.
 *
 * 1. 시작 위치를 기준으로 오름차순 정렬을 하고 순회한다.
 * 3. stack의 최상위가 가리키는 차의 정보로 남은 거리를 몇 번만에 통과할 수 있는지 시간을 계산하고,
 * 이를 현재 차의 통과 시간과 비교한다.
 * 3. 만약 현재 차가 통과할 수 있는 시간이 stack의 최상위가 가리키는 차의 통과 시간보다 크거나 같다면,
 * stack에서 차의 정보를 꺼내 최고 위치와 최저 속도를 구한다.
 * 4. 위 과정을 stack에 차의 정보가 없거나 stack의 최상위가 가리키는 차의 통과 시간보다 작을 때까지 반복한다.
 * 5. 앞서 구한 최고 위치와 최저 속도로 대형을 이룬다.
 * 6. stack에 현재 차의 인덱스를 넣는다.
 * 7. 순회가 끝나면 stack의 크기를 반환한다.
 */
class Solution {
    fun carFleet(target: Int, position: IntArray, speed: IntArray): Int {
        val sorted = position
            .mapIndexed { index, pos -> pos to speed[index] }
            .sortedBy { it.first }
            .toMutableList()
        val stack = Stack<Int>()

        sorted.forEachIndexed { index, (p, s) ->
            var maxP = p
            var minS = s

            while (stack.isNotEmpty() &&
                (target - p) / s.toFloat() >=
                (target - sorted[stack.peek()].first) / sorted[stack.peek()].second.toFloat()
            ) {
                val popped = sorted[stack.pop()]
                maxP = max(popped.first, maxP)
                minS = min(popped.second, minS)
            }

            sorted[index] = maxP to minS

            stack.push(index)
        }

        return stack.size
    }
}

fun main() {
    Solution().carFleet(
        target = 12,
        position = intArrayOf(10, 8, 0, 5, 3),
        speed = intArrayOf(2, 4, 1, 1, 3)
    ).runTestcase(expected = 3)
    Solution().carFleet(
        target = 10,
        position = intArrayOf(3),
        speed = intArrayOf(3)
    ).runTestcase(expected = 1)
    Solution().carFleet(
        target = 100,
        position = intArrayOf(0, 2, 4),
        speed = intArrayOf(4, 2, 1)
    ).runTestcase(expected = 1)
    Solution().carFleet(
        target = 10,
        position = intArrayOf(6, 8),
        speed = intArrayOf(3, 2)
    ).runTestcase(expected = 2)
    Solution().carFleet(
        target = 10,
        position = intArrayOf(8, 3, 7, 4, 6, 5),
        speed = intArrayOf(4, 4, 4, 4, 4, 4)
    ).runTestcase(expected = 6)
}
